"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[696],{990:e=>{e.exports=JSON.parse('{"functions":[{"name":"children","desc":"Any Instances that do not pass the predicate will not be included.\\n\\n```lua\\nlocal onlyBaseParts = children(workspace, function(child)\\n\\treturn child:IsA(\\"BasePart\\")\\nend)\\n```","params":[{"name":"root","desc":"","lua_type":"Instance"},{"name":"predicate?","desc":"The function to filter the children with.","lua_type":"(Instance) -> boolean"}],"returns":[{"desc":"The filtered children.","lua_type":"{ Instance }"}],"function_type":"static","source":{"line":54,"path":"src/Collect.luau"}},{"name":"descendantsBFS","desc":"Travels Breadth-First.\\n\\nThe predicate of this function can return `true`, `false`, or `nil` with different behaviors for each:\\n* `true`: The Instance is included in the result array\\n* `false`: The Instance is not included in the result array\\n* `nil`: The Instance is not included in the result array and travel will not continue through its descendants\\n\\n```lua\\nlocal onlyBaseParts = descendantsBFS(game, function(candidate)\\n\\tif candidate:IsA(\\"Workspace\\") then\\n\\t\\treturn nil\\n\\tend\\n\\n\\treturn candidate:IsA(\\"BasePart\\")\\nend)\\n```","params":[{"name":"root","desc":"","lua_type":"Instance"},{"name":"predicate?","desc":"The function to filter the descendants with. The second parameter represents depth.","lua_type":"(Instance, number) -> boolean?"}],"returns":[{"desc":"The filtered descendants.","lua_type":"{ Instance }"}],"function_type":"static","source":{"line":92,"path":"src/Collect.luau"}},{"name":"descendantsDFS","desc":"Travels Depth-First.\\n\\nThe predicate of this function can return `true`, `false`, or `nil` with different behaviors for each:\\n* `true`: The Instance is included in the result array\\n* `false`: The Instance is not included in the result array\\n* `nil`: The Instance is not included in the result array and travel will not continue through its descendants\\n\\n```lua\\nlocal onlyBaseParts = descendantsDFS(game, function(candidate, depth)\\n\\tif candidate:IsA(\\"Workspace\\") or depth >= 2 then\\n\\t\\treturn nil\\n\\tend\\n\\n\\treturn candidate:IsA(\\"BasePart\\")\\nend)\\n```","params":[{"name":"root","desc":"","lua_type":"Instance"},{"name":"predicate?","desc":"The function to filter the descendants with. The second arg represents depth.","lua_type":"(Instance, number) -> boolean?"}],"returns":[{"desc":"The filtered descendants.","lua_type":"{ Instance }"}],"function_type":"static","source":{"line":150,"path":"src/Collect.luau"}}],"properties":[],"types":[],"name":"Collect","desc":"Collect is a set of functions that capture and filter the children or descendants of an instance.\\n\\nNone of the predicates provided to these functions should yield.","source":{"line":12,"path":"src/Collect.luau"}}')}}]);