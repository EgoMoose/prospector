{"searchDocs":[{"title":"Prospector","type":0,"sectionRef":"#","url":"/prospector/api/Prospector","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Prospector","url":"/prospector/api/Prospector#properties","content":" ","version":null,"tagName":"h2"},{"title":"Collect​","type":1,"pageTitle":"Prospector","url":"/prospector/api/Prospector#Collect","content":"&lt;/&gt; Prospector.Collect: Collect   ","version":null,"tagName":"h3"},{"title":"FindFirstAncestor​","type":1,"pageTitle":"Prospector","url":"/prospector/api/Prospector#FindFirstAncestor","content":"&lt;/&gt; Prospector.FindFirstAncestor: FindFirstAncestor   ","version":null,"tagName":"h3"},{"title":"FindFirstChild​","type":1,"pageTitle":"Prospector","url":"/prospector/api/Prospector#FindFirstChild","content":"&lt;/&gt; Prospector.FindFirstChild: FindFirstChild   ","version":null,"tagName":"h3"},{"title":"WaitForChild​","type":1,"pageTitle":"Prospector","url":"/prospector/api/Prospector#WaitForChild","content":"&lt;/&gt; Prospector.WaitForChild: WaitForChild  ","version":null,"tagName":"h3"},{"title":"FindFirstChild","type":0,"sectionRef":"#","url":"/prospector/api/FindFirstChild","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"FindFirstChild","url":"/prospector/api/FindFirstChild#functions","content":" ","version":null,"tagName":"h2"},{"title":"byPredicate​","type":1,"pageTitle":"FindFirstChild","url":"/prospector/api/FindFirstChild#byPredicate","content":"&lt;/&gt; FindFirstChild.byPredicate( root: Instance , recursive: boolean,-- Whether or not the search should be conducted recursively. predicate?: ( Instance , number ) → boolean-- The conditions under which the search has successfully found a result. The second parameter represents depth. ) → Instance? -- The result of the search. Travels Breadth-First through the descendants of root until it finds an Instance that passes the conditions of the predicate. The predicate of this function can return true, false, or nil with different behaviors for each: true: The Instance successfully matches the criteria of the search. false: The Instance does not match the criteria of the search, but will continue to look through its descendants. nil: The Instance does not match the criteria of the search and will not continue to look through its descendants. The distinction between false and nil only applies when recursive = true. local found = byPredicate(workspace, true, function(descendant, depth) -- looking for the first descendant of workspace that's a BasePart and has a certain color return descendant:IsA(&quot;BasePart&quot;) and descendant.Color = Color3.fromRGB(100, 120, 80) end)   ","version":null,"tagName":"h3"},{"title":"byName​","type":1,"pageTitle":"FindFirstChild","url":"/prospector/api/FindFirstChild#byName","content":"&lt;/&gt; FindFirstChild.byName( root: Instance , recursive: boolean,-- Whether or not the search should be conducted recursively. name: string-- The name of the Instance being searched for. ) → Instance? -- The result of the search. Travels Breadth-First through the descendants of root until it finds an Instance with the provided Name. local found = byName(workspace, false, &quot;Terrain&quot;)   ","version":null,"tagName":"h3"},{"title":"ofClass​","type":1,"pageTitle":"FindFirstChild","url":"/prospector/api/FindFirstChild#ofClass","content":"&lt;/&gt; FindFirstChild.ofClass( root: Instance , recursive: boolean,-- Whether or not the search should be conducted recursively. className: string-- The class name of the Instance being searched for. ) → Instance? -- The result of the search. Travels Breadth-First through the descendants of root until it finds an Instance with the provided ClassName. local found = ofClass(workspace, false, &quot;Part&quot;)   ","version":null,"tagName":"h3"},{"title":"whichIsA​","type":1,"pageTitle":"FindFirstChild","url":"/prospector/api/FindFirstChild#whichIsA","content":"&lt;/&gt; FindFirstChild.whichIsA( root: Instance , recursive: boolean,-- Whether or not the search should be conducted recursively. className: string-- The class name of the Instance being searched for. ) → Instance? -- The result of the search. Travels Breadth-First through the descendants of root until it finds an Instance with a class equivalent to or a subclass of a given class. local found = whichIsA(workspace, false, &quot;BasePart&quot;)   ","version":null,"tagName":"h3"},{"title":"byPath​","type":1,"pageTitle":"FindFirstChild","url":"/prospector/api/FindFirstChild#byPath","content":"&lt;/&gt; FindFirstChild.byPath( root: Instance , path: {string}-- The path by name from the root to the target Instance. ) → Instance? -- The result of the search. Travels the path starting from the root until it either cannot find the next step in the path or resolves the entire path. local found = byPath(game, { &quot;Workspace&quot;, &quot;Terrain&quot; })  ","version":null,"tagName":"h3"},{"title":"FindFirstAncestor","type":0,"sectionRef":"#","url":"/prospector/api/FindFirstAncestor","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"FindFirstAncestor","url":"/prospector/api/FindFirstAncestor#functions","content":" ","version":null,"tagName":"h2"},{"title":"byPredicate​","type":1,"pageTitle":"FindFirstAncestor","url":"/prospector/api/FindFirstAncestor#byPredicate","content":"&lt;/&gt; FindFirstAncestor.byPredicate( root: Instance , predicate?: ( Instance , number ) → boolean-- The conditions under which the search has successfully found a result. The second parameter represents depth. ) → Instance? -- The result of the search. Travels up through the ancestry of root until it finds an Instance that passes the conditions of the predicate. local found = byPredicate(workspace.Terrain, function(ancestor) return ancestor.Name ~= &quot;NotThisName&quot; end)   ","version":null,"tagName":"h3"},{"title":"byName​","type":1,"pageTitle":"FindFirstAncestor","url":"/prospector/api/FindFirstAncestor#byName","content":"&lt;/&gt; FindFirstAncestor.byName( root: Instance , name: string-- The name of the Instance being searched for. ) → Instance? -- The result of the search. Travels up through the ancestry of root until it finds an Instance that matches the provided name. local found = byName(workspace.Terrain, &quot;Workspace&quot;)   ","version":null,"tagName":"h3"},{"title":"ofClass​","type":1,"pageTitle":"FindFirstAncestor","url":"/prospector/api/FindFirstAncestor#ofClass","content":"&lt;/&gt; FindFirstAncestor.ofClass( root: Instance , className: string-- The class name of the Instance being searched for. ) → Instance? -- The result of the search. Travels up through the ancestry of root until it finds an Instance that matches the provided ClassName. local found = ofClass(workspace.Terrain, &quot;Workspace&quot;)   ","version":null,"tagName":"h3"},{"title":"whichIsA​","type":1,"pageTitle":"FindFirstAncestor","url":"/prospector/api/FindFirstAncestor#whichIsA","content":"&lt;/&gt; FindFirstAncestor.whichIsA( root: Instance , className: string-- The class name of the Instance being searched for. ) → Instance? -- The result of the search. Travels up through the ancestry of root until it finds an Instance with a class equivalent to or a subclass of a given class. local found = whichIsA(workspace.Terrain, &quot;WorldRoot&quot;)   ","version":null,"tagName":"h3"},{"title":"byDepth​","type":1,"pageTitle":"FindFirstAncestor","url":"/prospector/api/FindFirstAncestor#byDepth","content":"&lt;/&gt; FindFirstAncestor.byDepth( root: Instance , depth: number-- How many steps upwards to be traveled. ) → Instance? -- The result of the search. Travels up through the ancestry of root by depth number of steps. local found = byDepth(workspace.Terrain, 2) print(found == game)  ","version":null,"tagName":"h3"},{"title":"Collect","type":0,"sectionRef":"#","url":"/prospector/api/Collect","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Collect","url":"/prospector/api/Collect#functions","content":" ","version":null,"tagName":"h2"},{"title":"children​","type":1,"pageTitle":"Collect","url":"/prospector/api/Collect#children","content":"&lt;/&gt; Collect.children( root: Instance , predicate?: (Instance ) → boolean-- The function to filter the children with. ) → {Instance }-- The filtered children. Any Instances that do not pass the predicate will not be included. local onlyBaseParts = children(workspace, function(child) return child:IsA(&quot;BasePart&quot;) end)   ","version":null,"tagName":"h3"},{"title":"descendantsBFS​","type":1,"pageTitle":"Collect","url":"/prospector/api/Collect#descendantsBFS","content":"&lt;/&gt; Collect.descendantsBFS( root: Instance , predicate?: ( Instance , number ) → boolean?-- The function to filter the descendants with. The second parameter represents depth. ) → {Instance }-- The filtered descendants. Travels Breadth-First. The predicate of this function can return true, false, or nil with different behaviors for each: true: The Instance is included in the result array false: The Instance is not included in the result array nil: The Instance is not included in the result array and travel will not continue through its descendants local onlyBaseParts = descendantsBFS(game, function(candidate) if candidate:IsA(&quot;Workspace&quot;) then return nil end return candidate:IsA(&quot;BasePart&quot;) end)   ","version":null,"tagName":"h3"},{"title":"descendantsDFS​","type":1,"pageTitle":"Collect","url":"/prospector/api/Collect#descendantsDFS","content":"&lt;/&gt; Collect.descendantsDFS( root: Instance , predicate?: ( Instance , number ) → boolean?-- The function to filter the descendants with. The second arg represents depth. ) → {Instance }-- The filtered descendants. Travels Depth-First. The predicate of this function can return true, false, or nil with different behaviors for each: true: The Instance is included in the result array false: The Instance is not included in the result array nil: The Instance is not included in the result array and travel will not continue through its descendants local onlyBaseParts = descendantsDFS(game, function(candidate, depth) if candidate:IsA(&quot;Workspace&quot;) or depth &gt;= 2 then return nil end return candidate:IsA(&quot;BasePart&quot;) end)  ","version":null,"tagName":"h3"},{"title":"WaitForChild","type":0,"sectionRef":"#","url":"/prospector/api/WaitForChild","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"WaitForChild","url":"/prospector/api/WaitForChild#functions","content":" ","version":null,"tagName":"h2"},{"title":"byPredicate​","type":1,"pageTitle":"WaitForChild","url":"/prospector/api/WaitForChild#byPredicate","content":"&lt;/&gt; WaitForChild.byPredicate( root: Instance , timeout: number,-- How long before the promise automatically resolves as nil. predicate?: (Instance ) → boolean-- The conditions under which the search has successfully found a result. ) → Instance? -- The result of the search. First looks through the children of root for an Instance that passes the conditions of the predicate and if none are found begins listening for new instances and changes to existing ones. local found = byPredicate(workspace, math.huge, function(child) -- waiting for the first descendant of workspace that's a BasePart and has a certain color return child:IsA(&quot;BasePart&quot;) and child.Color = Color3.fromRGB(100, 120, 80) end)   ","version":null,"tagName":"h3"},{"title":"byName​","type":1,"pageTitle":"WaitForChild","url":"/prospector/api/WaitForChild#byName","content":"&lt;/&gt; WaitForChild.byName( root: Instance , timeout: number,-- How long before the promise automatically resolves as nil. name: string-- The name of the Instance being searched for. ) → Instance? -- The result of the search. First looks through the children of root for an Instance with the same name and if none are found begins listening for new instances and changes to existing ones. local found = byName(workspace, math.huge, &quot;Part&quot;)   ","version":null,"tagName":"h3"},{"title":"ofClass​","type":1,"pageTitle":"WaitForChild","url":"/prospector/api/WaitForChild#ofClass","content":"&lt;/&gt; WaitForChild.ofClass( root: Instance , timeout: number,-- How long before the promise automatically resolves as nil. className: string-- The class name of the Instance being searched for. ) → Instance? -- The result of the search. First looks through the children of root for an Instance with the same ClassName and if none are found begins listening for new instances and changes to existing ones. local found = ofClass(workspace, math.huge, &quot;Part&quot;)   ","version":null,"tagName":"h3"},{"title":"whichIsA​","type":1,"pageTitle":"WaitForChild","url":"/prospector/api/WaitForChild#whichIsA","content":"&lt;/&gt; WaitForChild.whichIsA( root: Instance , timeout: number,-- How long before the promise automatically resolves as nil. className: string-- The class name of the Instance being search for. ) → Instance? -- The result of the search. First looks through the children of root for an Instance that's equivalent to or a subclass of a given class and if if none are found then begins listening for new instances and changes to existing ones. local found = whichIsA(workspace, math.huge, &quot;BasePart&quot;)   ","version":null,"tagName":"h3"},{"title":"byPath​","type":1,"pageTitle":"WaitForChild","url":"/prospector/api/WaitForChild#byPath","content":"&lt;/&gt; WaitForChild.byPath( root: Instance , timeout: number,-- How long before the promise automatically resolves as nil. path: {string}-- The path by name from the root to the target Instance. ) → Instance? -- The result of the search. Travels the path starting from the root instance and if none are found begins listening for new instances and changes to existing ones at each step. local found = byPath(game, math.huge, { &quot;Workspace&quot;, &quot;Terrain&quot; })  ","version":null,"tagName":"h3"}],"options":{"id":"default"}}